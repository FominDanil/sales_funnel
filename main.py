import os
from datetime import datetime, timedelta

from aiogram import executor, Dispatcher, Bot, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from asyncio import sleep
from PIL import Image, ImageDraw, ImageOps, ImageFont

from apscheduler.schedulers.asyncio import AsyncIOScheduler

from dotenv import load_dotenv

load_dotenv()

token = os.getenv('BOT_TOKEN')


bot = Bot(token)

dp = Dispatcher(bot, storage=MemoryStorage())

scheduler = AsyncIOScheduler(timezone='Europe/Moscow', job_defaults={'misfire_grace_time': 600})

delay_sec = 300
jobs = {}

class States(StatesGroup):
    first = State()
    second = State()
    third = State()
    fin = State()

async def reminder(user_id):

    if jobs.get(user_id):
        jobs[user_id] = ''

    with open('8.jpg', 'rb') as f:
        await bot.send_photo(user_id, f, caption='üëã –ú—ã –ø–æ—á—Ç–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–ª–∏ —Ç–≤–æ–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª! –î–∞–≤–∞–π –¥–æ–≤–µ–¥–µ–º –¥–µ–ª–æ –¥–æ –∫–æ–Ω—Ü–∞?\n–û—Ç–≤–µ—Ç—å –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—ÅüëÜüèª')


@dp.message_handler(commands=['start'], state='*')
async def send_welcome(message: types.Message):
    job = jobs.get(message.from_user.id)
    if job:
        try:
            job.remove()
        except Exception as e:
            print(e)

    jobs[message.from_user.id] = scheduler.add_job(reminder, trigger='date', run_date=datetime.now() + timedelta(seconds=delay_sec), kwargs=dict(user_id=message.from_user.id))

    markup = types.InlineKeyboardMarkup()
    itembtn1 = types.InlineKeyboardButton(text='–ü–æ–≥–Ω–∞–ª–∏!', callback_data='button0_pressed')
    markup.add(itembtn1)

    with open('1.jpg', 'rb') as privetstvie_photo:
        await message.answer_photo(privetstvie_photo, caption="–ü—Ä–∏–≤–µ—Ç! ü•∞\n \n–û—á–µ–Ω—å —Ä–∞–¥–∞, —á—Ç–æ —Ç—ã —Ä–µ—à–∏–ª –ø–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–∞—à–∏ —Ä—è–¥—ã —É—Å–ø–µ—à–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤!\n \n–°–∫–æ—Ä–µ–π –∂–º–∏ ¬´–°—Ç–∞—Ä—Ç¬ª, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—É—é —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –∏ –ø–æ—Å—á–∏—Ç–∞—Ç—å —Å–∫–æ–ª—å–∫–æ —Ç—ã —Å–º–æ–∂–µ—à—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ —Å–≤–æ–µ–≥–æ –±–ª–æ–≥–∞ –£–ñ–ï –°–ï–ô–ß–ê–° ü§´",reply_markup=markup)


@dp.callback_query_handler(text='button0_pressed')
async def handle_callback_query(call: types.CallbackQuery):
    job = jobs.get(call.from_user.id)
    if job:
        job.remove()
    jobs[call.from_user.id] = scheduler.add_job(reminder, trigger='date',
                                                   run_date=datetime.now() + timedelta(seconds=delay_sec),
                                                   kwargs=dict(user_id=call.from_user.id))

    await call.message.answer('ü§ë –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–∞–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å. –ù–∞–º –Ω—É–∂–Ω–æ –ø–æ–Ω—è—Ç—å, —á–µ–º —Ç—ã –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è.\n \n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–∞, –ø–æ—ç—Ç–æ–º—É –º–æ–∂–µ—à—å –Ω–µ —Å—Ç–µ—Å–Ω—è—Ç—å—Å—è –∏ –≥–æ–≤–æ—Ä–∏—Ç—å –ø—Ä–∞–≤–¥—É!')

    keyboard = [[types.InlineKeyboardButton("–ë—å—é—Ç–∏", callback_data='button10_pressed')],
                [types.InlineKeyboardButton("–≠–∫—Å–ø–µ—Ä—Ç", callback_data='button11_pressed')],
                [types.InlineKeyboardButton("–§—Ä–∏–ª–∞–Ω—Å", callback_data='button12_pressed')],
                [types.InlineKeyboardButton("–•–µ–Ω–¥–º–µ–π–¥", callback_data='button13_pressed')]]

    reply_markup = types.InlineKeyboardMarkup(row_width=1, inline_keyboard=keyboard)

    with open('2.jpg', 'rb') as photo_nisha:
        await call.message.answer_photo(photo_nisha, caption='–í—ã–±–µ—Ä–∏ —Å–≤–æ—é –Ω–∏—à—É.', reply_markup=reply_markup)

    await call.answer()

@dp.callback_query_handler(text=['button10_pressed', 'button11_pressed', 'button12_pressed', 'button13_pressed'])
async def btq023(call: types.CallbackQuery, state: FSMContext):
    job = jobs.get(call.from_user.id)
    if job:
        job.remove()
    jobs[call.from_user.id] = scheduler.add_job(reminder, trigger='date',
                                                run_date=datetime.now() + timedelta(seconds=delay_sec),
                                                kwargs=dict(user_id=call.from_user.id))

    await call.message.answer('–û—Ç–ª–∏—á–Ω–æ, –º—ã –≤–Ω–µ—Å–ª–∏ –≤ —Å–µ–∫—Ä–µ—Ç–Ω—É—é –±–∞–∑—É —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. üë©‚Äçüíª')  # , reply_markup=reply_markup45)
    await sleep(2)
    await call.message.answer('üî• –ß—Ç–æ–±—ã –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–≤–æ–π –†–ï–ê–õ–¨–ù–û –í–û–ó–ú–û–ñ–ù–´–ô –î–û–•–û–î. –û—Ç–≤–µ—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã.')
    await sleep(3)
    with open('3.jpg', 'rb') as photo_followers:
        await call.message.answer_photo(photo_followers, caption="–ö–∞–∫–æ–µ —É —Ç–µ–±—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤?\n \n‚ùóÔ∏è–í–≤–µ–¥–∏ —Ç–æ—á–Ω—É—é —Ü–∏—Ñ—Ä—É –°–õ–ò–¢–ù–û. –ü—Ä–∏–º–µ—Ä: 3891")
    await States.first.set()
    await call.answer()


@dp.callback_query_handler(text=['button20_pressed', 'button22_pressed', 'button23_pressed'])
async def btn202223(call: types.CallbackQuery, state: FSMContext):
    job = jobs.get(call.from_user.id)
    if job:
        job.remove()
    jobs[call.from_user.id] = scheduler.add_job(reminder, trigger='date',
                                                run_date=datetime.now() + timedelta(seconds=delay_sec),
                                                kwargs=dict(user_id=call.from_user.id))
    await state.update_data(count=0.1)
    with open('3.jpg', 'rb') as photo3:
        await call.message.answer_photo(photo3, caption='ü§î –£–∫–∞–∂–∏ –∫–∞–∫–æ–π —É —Ç–µ–±—è –æ—Ö–≤–∞—Ç –≤ —Å—Ç–æ—Ä–∏—Å? (–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –≤ —Å—Ç–æ—Ä–∏—Å. –í–æ–∑—å–º–∏ —Ü–∏—Ñ—Ä—É –ø–µ—Ä–≤–æ–π —Å—Ç–æ—Ä–∏—Å)')
    await States.second.set()
    await call.answer()

@dp.callback_query_handler(text='button21_pressed')
async def btn21(call: types.CallbackQuery, state: FSMContext):
    job = jobs.get(call.from_user.id)
    if job:
        job.remove()
    jobs[call.from_user.id] = scheduler.add_job(reminder, trigger='date',
                                                run_date=datetime.now() + timedelta(seconds=delay_sec),
                                                kwargs=dict(user_id=call.from_user.id))
    await state.update_data(count=0.05)
    with open('3.jpg', 'rb') as photo3:
        await call.message.answer(photo3, caption='ü§î –£–∫–∞–∂–∏ –∫–∞–∫–æ–π —É —Ç–µ–±—è –æ—Ö–≤–∞—Ç –≤ —Å—Ç–æ—Ä–∏—Å? (–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –≤ —Å—Ç–æ—Ä–∏—Å. –í–æ–∑—å–º–∏ —Ü–∏—Ñ—Ä—É –ø–µ—Ä–≤–æ–π —Å—Ç–æ—Ä–∏—Å)')
    await States.second.set()
    await call.answer()


@dp.callback_query_handler(text=['button40_pressed', 'button41_pressed'], state='*')
async def btn4041(call: types.CallbackQuery, state: FSMContext):
    job = jobs.get(call.from_user.id)
    if job:
        job.remove()
    jobs[call.from_user.id] = scheduler.add_job(reminder, trigger='date',
                                                run_date=datetime.now() + timedelta(seconds=delay_sec),
                                                kwargs=dict(user_id=call.from_user.id))
    with open('7.jpg', 'rb') as photo7:
        await call.message.answer_photo(photo7, caption='üî• –°–ø–∞—Å–∏–±–æ, –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!\n \nüíé –î–µ–ª–∞–µ–º —Ä–∞—Å—á–µ—Ç‚Ä¶')
    await sleep(5)

    state_data = await state.get_data()
    vovlechonost1 = int(0.3 * state_data['user_input_count_followers'] * 0.15 * state_data['user_input_check'])
    vovlechonost2 = int(0.1 * state_data['user_input_count_followers'] * 0.1 * state_data['user_input_check'])

    await call.message.answer('–¢–≤–æ–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–æ—Ö–æ–¥–∞ (–°–ö–û–õ–¨–ö–û –¢–´ –†–ï–ê–õ–¨–ù–û –ú–û–ñ–ï–®–¨ –ó–ê–†–ê–ë–û–¢–ê–¢–¨ –° –ë–õ–û–ì–ê) —Å–µ–π—á–∞—Å —Ä–∞–≤–µ–Ω {:,}'.format(
                         vovlechonost1) + '\n \nüòè –ù–µ–ø–ª–æ—Ö–æ, –Ω–µ –ø—Ä–∞–≤–¥–∞ –ª–∏?')

    await sleep(3)

    result = (abs(vovlechonost2 - vovlechonost1)) * 12
    with open('666.jpg', 'rb') as photo666:
        await call.message.answer_photo(photo666, caption= '–í –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–ª—É—á–∞–µ–≤, –ø—Ä–∏ —Ç–∞–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö, –º–Ω–æ–≥–∏–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –Ω–µ –±–æ–ª—å—à–µ -> {:,} —Ä—É–±–ª–µ–π'.format(vovlechonost2) + '\n–¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —Ç—ã —Ç–µ—Ä—è–µ—à—å –æ–∫–æ–ª–æ {:,}'.format(result) + ' —Ä—É–±–ª–µ–π –í –ì–û–îüò±!!!')

    await sleep(5)

    markup101 = types.InlineKeyboardMarkup(row_width=1)
    button101 = types.InlineKeyboardButton(text="–î–ê!!!", callback_data='button123_pressed')
    markup101.add(button101)

    await call.message.answer('ü•≥ –í—ã–π—Ç–∏ –Ω–∞ —Å—É–º–º—É –≤ {:,}'.format(vovlechonost1) +' —Ä—É–±–ª–µ–π –º–æ–∂–Ω–æ –ª–µ–≥–∫–æ —É–∂–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—è—Ü–µ, –µ—Å–ª–∏ –∑–Ω–∞—Ç—å –∫–∞–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø—Ä–∏–º–µ–Ω—è—Ç—å –∏ –ø–æ–Ω–∏–º–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –ø—Ä–æ–¥–∞–∂ –≤ –±–ª–æ–≥–µ!\n \n–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –∫–∞–∫?',reply_markup= markup101)
    await call.answer()

@dp.callback_query_handler(text='button123_pressed', state='*')
async def btn123(call: types.CallbackQuery, state: FSMContext):
    job = jobs.get(call.from_user.id)
    if job:
        job.remove()

    with open('9.jpg', 'rb') as photo9:
        await call.message.answer_photo(photo9, caption='üòé –ö–∞–∫ —É–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–≤–ª–µ—á—ë–Ω–Ω–æ—Å—Ç–∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏ –ë–ï–ó –ü–†–ò–í–õ–ï–ß–ï–ù–ò–Ø –ù–û–í–û–ô –ê–£–î–ò–¢–û–†–ò–ò, —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∞–≥–µ–Ω—Ç –∏ —Ä–∞—Å—Å–∫–∞–∂–µ—Ç —Ç–µ–±–µ –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä–µ!\n \n–ü—Ä–∏—Ö–æ–¥–∏ 3 –∞–ø—Ä–µ–ª—è –≤ 10.00 –ø–æ –ú—Å–∫.\n \n–ù–µ –∑–∞–±—É–¥—å!üí∏')
        #bot.send_message(call.message.chat.id, "üòé –ö–∞–∫ —É–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–≤–ª–µ—á—ë–Ω–Ω–æ—Å—Ç–∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏ –ë–ï–ó –ü–†–ò–í–õ–ï–ß–ï–ù–ò–Ø –ù–û–í–û–ô –ê–£–î–ò–¢–û–†–ò–ò, —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∞–≥–µ–Ω—Ç –∏ —Ä–∞—Å—Å–∫–∞–∂–µ—Ç —Ç–µ–±–µ –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä–µ!\n–ü—Ä–∏—Ö–æ–¥–∏ —Ç–∞–∫–æ–≥–æ —Ç–æ —á–∏—Å–ª–∞, –≤–æ —Å—Ç–æ–ª—å–∫–æ.\n \n–ù–µ –∑–∞–±—É–¥—å!üí∏")
    await sleep(8)

    await call.message.answer('üéÅ –£ –º–µ–Ω—è –µ—Å—Ç—å –¥–ª—è —Ç–µ–±—è –ø–æ–¥–∞—Ä–æ–∫!\n–í—ã—Å—Ç–∞–≤–ª—è–π —Å–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å—Ç–æ—Ä–∏—Å —Å –æ—Ç–º–µ—Ç–∫–æ–π –º–µ–Ω—è –∏ —É—á–∞—Å—Ç–≤—É–π –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ —Ä–∞–∑–±–æ—Ä–∞ –¢–í–û–ï–ì–û –ê–ö–ö–ê–£–ù–¢–ê. –ú—ã –≤—ã–±–µ—Ä–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –∏ –ü–û–î–°–í–ï–¢–ò–ú –í–ê–®–ò –¢–û–ß–ö–ò –†–û–°–¢–ê –ø—Ä—è–º–æ –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä–µ!\n \n–î–µ—Ä–∂–∏ –º–∞–∫–µ—Çüëáüèª')

    user_id = call.from_user.id
    user_info = await bot.get_user_profile_photos(user_id)

    if user_info.photos:
        state_data = await state.get_data()

        vovlechonost = int(0.3 * state_data['user_input_count_followers'] * 0.15 * state_data['user_input_check'])

        file_id = user_info.photos[0][-1].file_id
        file_info = await bot.get_file(file_id)
        downloaded_file = await bot.download_file(file_info.file_path)

        # –∑–∞–≥—Ä—É–∂–∞–µ–º –¥—Ä—É–≥—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
        other_image = Image.open("final.jpg")

        # –∑–∞–≥—Ä—É–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Image
        avatar_image = Image.open(downloaded_file)

        avatar_image = avatar_image.resize((int(avatar_image.width * 0.70), int(avatar_image.height * 0.70)))
        # —Å–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å–∫–∏ –∫—Ä—É–≥–∞
        mask = Image.new('L', avatar_image.size, 0)
        draw = ImageDraw.Draw(mask)
        draw.ellipse((0, 0) + avatar_image.size, fill=255)

        # –æ–±—Ä–µ–∑–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–µ –∫—Ä—É–≥–∞
        avatar_image = ImageOps.fit(avatar_image, mask.size, centering=(0.5, 0.5))
        avatar_image.putalpha(mask)

        # –Ω–∞–ª–æ–∂–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –¥—Ä—É–≥—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
        other_image.paste(avatar_image, (350, 800), avatar_image)

        draw = ImageDraw.Draw(other_image)
        font_size = 100
        font = ImageFont.truetype('CascadiaMono.ttf', font_size)

        #text = "{:,}".format(vovlechonost2)
        #text_width, text_height = draw.textsize(text, font)
        #x = other_image.width - text_width - 400
        #y = other_image.height - text_height - 1489
        #draw.text((x, y), text, font=font, fill=(255, 255, 255))
        text = "{:,}".format(vovlechonost)
        text_bbox = font.getbbox(text)
        text_width = text_bbox[2] - text_bbox[0]
        text_height = text_bbox[3] - text_bbox[1]
        x = other_image.width - text_width - 390
        y = other_image.height - text_height - 1498
        draw.text((x, y), text, font=font, fill=(255, 255, 255))

        # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        other_image.save(f"porosonok-{user_id}.jpg")
        await sleep(4)
        with open(f'porosonok-{user_id}.jpg', 'rb') as photo101:
            await call.message.answer_photo(photo101)


        other_image.close()
        avatar_image.close()
        try:
            os.remove(f'porosonok-{user_id}.jpg')
            print(f'–§–∞–π–ª porosonok-{user_id}.jpg —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.')
        except OSError as e:
            print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ porosonok-{user_id}.jpg: {e.strerror}')
        await sleep(180)
        with open('guide_po_progrevu.pdf', 'rb') as pdf_file:
            await call.message.answer_document(pdf_file, caption='üëã–ü–æ–∫–∞ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ –≤–µ–±–∏–Ω–∞—Ä–∞ –¥–∞—é —Ç–µ–±–µ –Ω–µ–±–æ–ª—å—à—É—é –ø–æ–ª—å–∑—É. –¢—ã —Å–º–æ–∂–µ—à—å –∏–∑—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –∏ —É–∂–µ –Ω–∞—á–∞—Ç—å –¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–µ —à–∞–≥–∏ –≤ —Å—Ç–æ—Ä–æ–Ω—É —Å–≤–æ–µ–≥–æ —É—Å–ø–µ—Ö–∞. –ó–∞–±–∏—Ä–∞–π –≥–∞–π–¥ ¬´–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ–≤ –¥–ª—è –ª—é–±–æ–≥–æ —ç–∫—Å–ø–µ—Ä—Ç–∞¬ª')
        await state.finish()
        await call.answer()


@dp.message_handler(state=States.first)
async def podpis(message: types.Message, state: FSMContext):
    job = jobs.get(message.from_user.id)
    if job:
        job.remove()
    jobs[message.from_user.id] = scheduler.add_job(reminder, trigger='date',
                                                   run_date=datetime.now() + timedelta(seconds=delay_sec),
                                                   kwargs=dict(user_id=message.from_user.id))

    try:
        user_input_count_followers = int(message.text)
        if user_input_count_followers >= 10:
            with open('4.jpg', 'rb') as photo4:
                await message.answer_photo(photo4,
                           caption='ü§î –£–∫–∞–∂–∏ –∫–∞–∫–æ–π —É —Ç–µ–±—è –æ—Ö–≤–∞—Ç –≤ —Å—Ç–æ—Ä–∏—Å? (–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –≤ —Å—Ç–æ—Ä–∏—Å. –í–æ–∑—å–º–∏ —Ü–∏—Ñ—Ä—É –ø–µ—Ä–≤–æ–π —Å—Ç–æ—Ä–∏—Å)\n \n‚ùóÔ∏è–í–≤–µ–¥–∏ —Ç–æ—á–Ω—É—é —Ü–∏—Ñ—Ä—É –°–õ–ò–¢–ù–û. –ü—Ä–∏–º–µ—Ä: 380')

            await States.second.set()
            await state.update_data({'user_input_count_followers': user_input_count_followers})
        else:
            await message.reply('–í—ã –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –æ—Ç 10 –¥–æ 100000')
    except ValueError:
        await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ')


@dp.message_handler(state=States.second)
async def ohvat(message: types.Message, state: FSMContext):
    job = jobs.get(message.from_user.id)
    if job:
        job.remove()
    jobs[message.from_user.id] = scheduler.add_job(reminder, trigger='date',
                                                   run_date=datetime.now() + timedelta(seconds=delay_sec),
                                                   kwargs=dict(user_id=message.from_user.id))

    try:
        user_input_ohvati = int(message.text)
        await message.answer('ü•≥ –§–æ—Ä–º—É–ª–∞ –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–∞ –∏ —É —Ç–µ–±—è –≤ —Ä—É–∫–∞—Ö!\n \n–ù–æ –¥–ª—è –∏—Ç–æ–≥–∞ –æ—Ç–≤–µ—Ç—å –µ—â–µ –Ω–∞ –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤‚Ä¶')
        await States.third.set()
        await state.update_data({'user_input_ohvati': user_input_ohvati})
        await sleep(3)
        with open('5.jpg', 'rb') as photo5:
            await message.answer_photo(photo5,
                           caption='üíµ –ö–∞–∫–æ–π —É —Ç–µ–±—è —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫?\n \n‚ùóÔ∏è–í–≤–µ–¥–∏ —Ü–∏—Ñ—Ä—É –°–õ–ò–¢–ù–û. –ü—Ä–∏–º–µ—Ä: 20000')

    except ValueError:
        await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ')


@dp.message_handler(state=States.third)
async def avg(message: types.Message, state: FSMContext):
    job = jobs.get(message.from_user.id)
    if job:
        job.remove()
    jobs[message.from_user.id] = scheduler.add_job(reminder, trigger='date',
                                                   run_date=datetime.now() + timedelta(seconds=delay_sec),
                                                   kwargs=dict(user_id=message.from_user.id))

    try:
        user_input_check = int(message.text)
        keyboard8 = [[types.InlineKeyboardButton("–î–∞", callback_data='button40_pressed'),
                      types.InlineKeyboardButton("–ù–µ—Ç", callback_data='button41_pressed')]]
        reply_markupQ = types.InlineKeyboardMarkup(row_width=1, inline_keyboard=keyboard8)
        with open('6.jpg', 'rb') as photo6:
            await message.answer_photo(photo6, caption='ü§î –†–∞—Å—Å–∫–∞–∂–∏, —Ç—ã –ø—Ä–æ–¥–∞–≤–∞–ª –≤ –±–ª–æ–≥–µ —Ä–∞–Ω—å—à–µ –∏–ª–∏ –Ω–µ—Ç?',
                       reply_markup=reply_markupQ)
        await state.update_data({'user_input_check':user_input_check})
        await States.fin.set()

    except ValueError:
        await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ')


async def start_up(dp):
    scheduler.start()


executor.start_polling(dp, skip_updates=True, on_startup=start_up)